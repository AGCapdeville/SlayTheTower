{"version":3,"sources":["components/hand/hand.module.scss","components/foe-zone/foe-zone.module.scss","components/screens/resolution/resolution.module.scss","components/screens/hero-selection/hero-selection.module.scss","components/screens/title/title.module.scss","components/screens/encounter/encounter.module.scss","components/draw-zone/draw-zone.module.scss","components/discard-zone/discard-zone.module.scss","components/player-health/player-health.module.scss","components/screens/map/map.module.scss","ducks/screen.js","game-data/creep-data.js","ducks/foe.js","ducks/player.js","game-data/card-data.js","game-data/heros-data.js","ducks/climbState.js","game-data/game-state.js","components/screens/title/title.jsx","components/hand/hand.jsx","components/draw-zone/draw-zone.jsx","components/discard-zone/discard-zone.jsx","components/player-health/player-health.jsx","components/foe-zone/foe-zone.jsx","ducks/encounter.js","components/turn-bttn/turn-bttn.jsx","ducks/map.js","components/screens/encounter/encounter.jsx","components/screens/resolution/resolution.jsx","components/screens/hero-selection/hero-selection.jsx","components/screens/map/map.jsx","App.js","ducks/index.js","index.js","configurestore.js"],"names":["module","exports","updateScreen","createAction","handleActions","state","action","payload","selectScreen","createSelector","screen","creeps","name","art","health","total","armor","telegraphing","order","target","effect","power","moves","spawnFoe","updateFoe","selectFoe","foe","useFoe","useSelector","updatePlayer","setDeck","drawCard","playCard","playIndexedCard","discardHand","voidCard","shuffleDeck","resetDeck","drawHand","shuffle","deck","j","x","i","length","Math","floor","random","slice","hand","discard","rest","newDiscard","newDeck","shuffledDiscard","grabCard","newHand","emptyHand","console","log","splice","voidPile","void","selectPlayer","player","usePlayer","cards","type","energy","exhaust","description","card_id","heros","hero","maxHealth","map","id","gold","updateClimbState","defeat","playerScore","selectClimbState","climbState","gameState","TitleScreen","dispatch","useDispatch","className","titleStyle","game","title","menu","onClick","Card","onCardClick","index","cardIndex","getState","card","energyCost","foeArmor","newEnergy","trample","newFoeHealth","parseInt","heal","newPlayerHealth","newPlayerArmor","key","styles","customButton","titleSection","Hand","activeZone","DrawZone","drawZone","DiscardZone","discardZone","PlayerHealth","useEffect","bar","document","getElementById","style","backgroundColor","height","width","dmg","updateHealthBar","position","opacity","updateArmorBar","playerHealthBorder","playerHealthIndicator","getTelegraph","FoeZone","foeHealth","foeMax","telegraph","newBar","ceil","updateFoeHealthBar","newArmor","updateFoeArmorBar","foeZone","foeTitle","foeImg","src","alt","foeHealthBorder","foeHealthIndicator","updateEncounter","encounter","TurnBttn","zone","combatMsgs","innerHTML","setTimeout","moveMsg","newHealth","newFoeArmor","lengthOfMoves","Object","keys","newPos","newTelegraph","filter","obj","devButton","updateMap","fieldEvent","fieldPaths","fieldPathEvents","count","selectMap","EncounterScreen","combatZoneOverlay","playerZone","ResolutionScreen","header","body","bttn","gameScreen","menuContainer","menuHeader","menuBody","menuFooter","menuOption","HeroSelection","heroType","heroContainer","heroTitle","heroImg","rollDice","min","max","genPathLength","onesOdds","genEvent","roll","fightOdds","elieteOdds","bonfireOdds","trialOdds","shopOdds","genPath","pathLength","setEvent","events","e","push","fillPaths","numberOfPaths","paths","p","createField","fieldEvents","fieldCount","fieldBatch","screens","Title","Encounter","Resolution","Map","currentField","UsePlayer","startingPaths","onPathSelection","field","newField","find","fields","event","dispatcher","eventHandler","display","flexDirection","justifyContent","alignItems","color","margin","pathButton","App","Screen","combineReducers","rootElement","store","preloadedState","middlewares","thunkMiddleware","enhancers","applyMiddleware","composedEnhancers","composeWithDevTools","createStore","rootReducer","configureStore","ReactDOM","render"],"mappings":"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","file":"static/js/main.18ccf89f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"customButton\":\"hand_customButton__3kPiN\",\"activeZone\":\"hand_activeZone__10s81\",\"hand\":\"hand_hand__FpDVp\",\"card\":\"hand_card__2Iyyc\",\"titleSection\":\"hand_titleSection__2pM3q\",\"title\":\"hand_title__2dma9\",\"energy\":\"hand_energy__2Nf2i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"telegraph\":\"foe-zone_telegraph__L_jkd\",\"foeTitle\":\"foe-zone_foeTitle__1YvQq\",\"foeZone\":\"foe-zone_foeZone__2X4Y_\",\"foe\":\"foe-zone_foe__1iF9l\",\"foeImg\":\"foe-zone_foeImg__2luo9\",\"foeHealthBorder\":\"foe-zone_foeHealthBorder__3gfyN\",\"foeHealthBar\":\"foe-zone_foeHealthBar__275gY\",\"foeHealthIndicator\":\"foe-zone_foeHealthIndicator__2NBhm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameScreen\":\"resolution_gameScreen__2Z8U2\",\"menuContainer\":\"resolution_menuContainer__N4HIa\",\"menuHeader\":\"resolution_menuHeader__3J5Ta\",\"menuBody\":\"resolution_menuBody__2AC6R\",\"menuFooter\":\"resolution_menuFooter__6HZ2y\",\"menuOption\":\"resolution_menuOption__1mI4y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameScreen\":\"hero-selection_gameScreen__CCdN_\",\"menuContainer\":\"hero-selection_menuContainer__gH6KW\",\"heroContainer\":\"hero-selection_heroContainer__3o7wE\",\"heroTitle\":\"hero-selection_heroTitle__1tGMV\",\"heroImg\":\"hero-selection_heroImg__1gPUg\",\"title\":\"hero-selection_title__JAIMu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"title_game__y3Wr0\",\"menu\":\"title_menu__2pkpl\",\"title\":\"title_title__2XrX_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"encounter_game__ht2XY\",\"playerZone\":\"encounter_playerZone__1sPHB\",\"combatZoneOverlay\":\"encounter_combatZoneOverlay__13FuS\",\"combatMsgs\":\"encounter_combatMsgs__2tEeR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drawZone\":\"draw-zone_drawZone__29T8p\",\"energy\":\"draw-zone_energy__1txD3\",\"deck\":\"draw-zone_deck__3wxHk\",\"devButton\":\"draw-zone_devButton__lMg0t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"discardZone\":\"discard-zone_discardZone__ebvxy\",\"void\":\"discard-zone_void__3aCqG\",\"discard\":\"discard-zone_discard__1RQku\",\"devButton\":\"discard-zone_devButton__qShdt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"playerHealthBorder\":\"player-health_playerHealthBorder__3CNh9\",\"playerHealthIndicator\":\"player-health_playerHealthIndicator__2DJ9t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pathButton\":\"map_pathButton__2TJoE\"};","import { createAction, handleActions } from \"redux-actions\";\nimport { useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\n\n\nexport const updateScreen = createAction('screen/UPDATE_SCREEN');\n\nconst initialSreenState = 'Title';\n\nexport default handleActions({\n    [updateScreen]: (state, action) => state = action.payload,\n}, initialSreenState);\n\nconst selectScreen = createSelector(\n    state => state.screen,\n    screen => screen   \n)\n\nexport const useScreen = () => useSelector(selectScreen);\n\n","\n\n\nexport const creeps = [\n    {\n        name: 'Slime',\n        art: 'https://i.imgur.com/Sun4iBT.png?1',\n        // health: 36, <- normal health\n        health: 5,\n        total: 36,\n        armor: 0,\n        telegraphing: [{ \n                name: ['Spit'],\n                order: 0,\n                target: ['hero'],\n                effect: ['damage'],\n                power: [8]\n            }],\n        moves: [\n            {\n                name: ['Spit'],\n                order: 0,\n                target: ['hero'],\n                effect: ['damage'],\n                power: [8]\n            },\n            {\n                name: ['Whip'],\n                order: 1,\n                target: ['hero'],\n                effect: ['damage'],\n                power: [13]\n            },\n            {\n                name : ['Soften'],\n                order: 2,\n                target: ['self'],\n                effect: ['armor'],\n                power: [12]\n            }\n        ]\n    },\n    {\n        name: 'Living Armor',\n        art: 'https://i.imgur.com/yl0eGRj.png?4',\n        health: 55,\n        total: 55,\n        armor: 0,\n        telegraphing: [\n            {\n                name: ['Lunging Strike'],\n                order: 0,\n                target: ['hero'],\n                effect: ['damage'],\n                power: [30]\n            }],\n        moves: [\n            {\n                name: ['Lunging Strike'],\n                order: 0,\n                target: ['hero'],\n                effect: ['damage'],\n                power: [30]\n            },\n            {\n                name: ['Defensive Mode'],\n                order: 1,\n                target: ['self'],\n                effect: ['wait'],\n                power: [0]\n            },\n            {\n                name: ['Repair'],\n                order: 2,\n                target: ['self'],\n                effect: ['heal'],\n                power: [20]\n            },\n            {\n                name: ['Offensive Mode'],\n                order: 3,\n                target: ['self'],\n                effect: ['wait'],\n                power: [0]\n            },\n        ]\n    }\n    // {\n    //     name: 'Living Armor',\n    //     art: 'https://i.imgur.com/yl0eGRj.png?4',\n    //     health: 52,\n    //     totalHealth: 52,\n    //     armor: 0,\n    //     telegraphing: ['damage 7'],\n    //     moves: {\n    //         'strike':{\n    //             order: 0,\n    //             target: ['hero'],\n    //             effect: ['damage'],\n    //             power: [7]\n    //         },\n    //         'Repair':{\n    //             order: 1,\n    //             target: ['self'],\n    //             effect: ['damage'],\n    //             power: [10]\n    //         },\n    //     }\n    // },\n    // TO REDO: - - - - - - - - - - - - - - - - WIP:\n    // {\n    //     name: 'living armor',\n    //     properties: {\n    //         art: 'art uri',\n    //         health: {\n    //             base: 15,\n    //             mod: 5\n    //         },\n    //         attacks: {\n    //             move: ['strike'],\n    //             dmg: [5]\n    //         },\n    //         deffends: {\n    //             move: ['meld'],\n    //             def: [10]\n    //         }\n    //     }\n    // },\n    // {\n    //     name: 'spooky skeleton',\n    //     properties: {\n    //         art: 'art uri',\n    //         health: {\n    //             base: 10,\n    //             mod: 6\n    //         },\n    //         attacks: {\n    //             move: ['tackle', 'smash'],\n    //             dmg: [4, 8]\n    //         },\n    //         deffends: {\n    //             move: ['calcium'],\n    //             def: [6]\n    //         }\n    //     }\n    // },\n]","import { createAction, handleActions } from \"redux-actions\";\nimport { useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { creeps } from '../game-data/creep-data';\n\n// export const setFoeName = createAction('foe/SET_FOE_NAME');\n// export const setFoeImg = createAction('foe/SET_FOE_IMG');\n// export const setFoeTotalHealth = createAction('foe/SET_FOE_TOTAL_HEALTH');\n// export const setFoeMoves = createAction('foe/SET_FOE_MOVES');\nexport const spawnFoe = createAction('foe/SPAWN_FOE');\nexport const updateFoe = createAction('foe/UPDATE_FOE');\n\nconst initialState = { };\n\n// name: 'Slime',\n// art: 'https://i.imgur.com/Sun4iBT.png?1',\n// health: 10,\n// totalHealth: 10,\n// armor: 0,\n// telegraphing: ['damage 5'],\n// moves: {\n//     'whip':{\n//         priority: 0,\n//         target: ['hero'],\n//         effect: ['damage'],\n//         power: [5]\n//     },\n//     'spit':{\n//         priority: 1,\n//         target: ['hero'],\n//         effect: ['damage'],\n//         power: [8]\n//     },\n//     'soften':{\n//         priority: 1,\n//         target: ['self'],\n//         effect: ['armor'],\n//         power: [12]\n//     }\n// }\n\n\nexport default handleActions({\n    [spawnFoe]: (state) => ({ ...state, ...creeps[0] }),\n    [updateFoe]: (state, action) => {\n        return ({ ...state, ...action.payload })\n    },\n}, initialState);\n\n\n// how we grab data from the store\nconst selectFoe = createSelector(\n    state => state.foe,\n    foe => foe   \n)\n\nexport const useFoe = () => useSelector(selectFoe);\n\n","import { createAction, handleActions } from \"redux-actions\";\nimport { useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { updateFoe } from './foe';\n\n// TODO: clean up and organize\n\n// Alter Health, Energy & Armor Actions:\nexport const updatePlayer = createAction('player/UPDATE_PLAYER');\n// export const newRound = createAction('player/NEW_ROUND');\n\n// Deck Actions:\nexport const setDeck = createAction('player/SET_DECK');\nexport const drawCard = createAction('player/DRAW_CARD');\nexport const playCard = createAction('player/PLAY_CARD');\n\nexport const playIndexedCard = createAction('player/PLAY_INDEXED_CARD');\nexport const discardHand = createAction('player/DISCARD_HAND');\n\nexport const voidCard = createAction('player/VOID_CARD');\nexport const shuffleDeck = createAction('player/SHUFFLE_DECK');\nexport const resetDeck = createAction('player/RESET_DECK')\n\n// Hand actions\nexport const drawHand = createAction('player/DRAW_HAND');\n\nconst initialState = {}\n\n\nfunction shuffle(deck) {\n    var j, x, i\n    for (i = deck.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1))\n        x = deck[i]\n        deck[i] = deck[j]\n        deck[j] = x\n    }\n    return deck\n}\n\n/**\n * \n * {\n *  name,\n *  health,\n *  deck,\n *  health,\n *  gold,\n * }\n */\n\nconst reduceResetDeck = ({ hand, deck, discard, ...rest }) => {\n    const newDiscard = [...discard, ...hand ]\n    const newDeck = [...deck, ...newDiscard]\n    return { ...rest, hand: [], deck: newDeck, discard: [] }\n}\n\nconst reduceDrawCard = ({ discard, deck, hand, ...rest }) => {\n    if ( deck.length == 0 ){\n        if ( discard.length == 0 ){\n            return { ...rest, discard, deck, hand}\n        } else {\n            const shuffledDiscard = shuffle(discard)\n            const grabCard = shuffledDiscard[shuffledDiscard.length-1]\n            const newDeck = shuffledDiscard.slice(0, shuffledDiscard.length-1)        \n            const newHand = [...hand, grabCard]\n            return { ...rest, hand: newHand, deck: newDeck, discard: [] }\n        }\n    } else {\n        return { ...rest, hand: [...hand, deck[deck.length-1]], deck: deck.slice( 0, deck.length -1), discard }\n    }\n}\n\nconst reducePlayCard = ({ discard, hand, ...rest }) => {\n    const emptyHand = hand.length < 1;\n    \n    if (!emptyHand){\n        const newHand =  hand.slice( 0, hand.length-1)\n        const newDiscard = [...discard, hand[hand.length-1] ]\n        return { ...rest, hand: newHand, discard: newDiscard}\n    }else{\n        return { ...rest, hand, discard}\n    }\n}\n\nconst reducePlayIndexedCard = ({ discard, hand, ...rest } , {payload}) => {\n    const emptyHand = hand.length < 1;\n    console.log(payload)\n\n    if (!emptyHand){\n        const grabCard = hand[payload]\n        hand.splice(payload, 1)\n        const newHand = hand\n        const newDiscard = [...discard, grabCard]\n        return { ...rest, hand: newHand, discard: newDiscard}\n    }else{\n        return { ...rest, hand, discard}\n    }\n}\n\nconst reduceDiscardHand = ({ discard, hand, ...rest }) => {\n    const emptyHand = hand.length < 1;\n\n    if (!emptyHand){\n        const newHand = []\n        const newDiscard = [...discard, ...hand ]\n        return { ...rest, hand: newHand, discard: newDiscard}\n    }else{\n        return { ...rest, hand, discard}\n    }\n}\n\n\nexport default handleActions({\n    [drawHand]: (state) => ({...state, deck: state.deck.slice( 0, state.deck.length -5), hand: [...state.hand, ...state.deck.slice(-5)]}),\n    [shuffleDeck]: (state) => ({...state, deck: shuffle(state.deck)}),\n    [updatePlayer]: (state, action) => ({ ...state, ...action.payload }),\n    [setDeck]: (state, action) => ({...state, deck: action.payload }),\n    \n    [resetDeck]: reduceResetDeck,\n\n    [drawCard]: reduceDrawCard,\n    [playCard]: reducePlayCard,\n    \n    [playIndexedCard]: reducePlayIndexedCard,\n    [discardHand]: reduceDiscardHand,\n\n    [voidCard]: (state, action) => ({...state, hand: state.hand.slice(action.payload, 1), voidPile: [...state.void, state.hand.slice(action.payload, 1)]}),\n}, initialState);\n\n// notes:\n// might need to see if I can set initialStates later ???????\n// [newRound]: (state) => ({...state, energy: initialState.energy, armor: initialState.armor}),\n// deck handle:\n\n\n// how we grab data from the store\nconst selectPlayer = createSelector(\n    state => state.player,\n    player => player   \n)\n\nexport const usePlayer = () => useSelector(selectPlayer);\n\n\n\n// Async Actions\nexport const applyCard = (cardIndex) => (dispatch, getState) => {\n    const state = getState();\n\n\n    const card = state.player.hand[cardIndex]\n    const energyCost = card.energy;\n    const foeArmor = state.foe.armor\n\n    if (energyCost <= state.player.energy) {\n        const newEnergy = state.player.energy - energyCost\n        if (card.action.target==\"foe\"){\n            if (card.action.effect==\"damage\"){\n                const damage = card.action.power\n                const trample = foeArmor - damage\n                if (trample < 0) {\n                    const newFoeHealth = parseInt(state.foe.health) + parseInt(trample)\n                    dispatch(updateFoe({ health: newFoeHealth, armor: 0}))\n                }else{\n                    const newFoeArmor = trample\n                    dispatch(updateFoe({ armor: newFoeArmor }))\n                }\n                dispatch(updatePlayer({ energy: newEnergy }))\n            }\n        } else {\n            if (card.action.effect==\"heal\"){\n                const heal = card.action.power\n                const newPlayerHealth = parseInt(state.player.health) + parseInt(heal)\n                dispatch(updatePlayer({ health: newPlayerHealth, energy: newEnergy }))\n            } else if (card.action.effect==\"armor\"){\n                const armor = card.action.power\n                const newPlayerArmor = parseInt(state.player.armor) + parseInt(armor)\n                dispatch(updatePlayer({ armor: newPlayerArmor, energy: newEnergy}))\n            }\n        }\n        dispatch(playIndexedCard(cardIndex))\n    } else {\n        console.log(\"! Not Enough Energy !\")\n    }\n\n\n}\n\n\n\n","export const cards = [\n    {\n        name: 'Slash',\n        art: '<art url>',\n        type: 'attack',\n        energy: 1,\n        exhaust: false,\n        action: {\n            target: ['foe'],\n            effect: ['damage'],\n            power: [5]\n        },\n        description: \"Deal 5 damage\",\n        card_id: 0\n        \n    },\n    {   \n        name: 'Guard',\n        art: '<art url>',\n        type: 'defend',\n        energy: 1,\n        exhaust: false,\n        action: {\n            target: ['hero'],\n            effect: ['armor'],\n            power: [5]\n        },\n        description: \"+5 Armor\",\n        card_id: 1\n    },\n    {   \n        name: 'Heal',\n        art: '<art url>',\n        type: 'skill',\n        energy: 2,\n        exhaust: true,\n        action: {\n            target: ['hero'],\n            effect: ['heal'],\n            power: [8]\n        },\n        description: \"Heal 8 damage\",\n        card_id: 2\n    },\n];","import {cards} from './card-data'\n\nexport const heros = [\n    {\n        hero: 'sword',\n        health: 55,\n        maxHealth: 55,\n        energy: 3,\n        armor: 0,\n        deck: [0,0,0,0,0,1,1,1,1,1,2].map(id => cards[id]),\n        hand: [],\n        discard: [],\n        void: [],\n        gold: 50\n    },\n\n    {\n        hero: 'fire',\n        health: 45,\n        maxHealth: 45,\n        energy: 4,\n        armor: 0,\n        deck: [0,0,0,0,0,1,1,1,1,1,2].map(id => cards[id]),\n        hand: [],\n        discard: [],\n        void: [],\n        gold: 50\n    }\n];\n\n\n\n\n\n\n\n\n\n","import { createAction, handleActions } from \"redux-actions\";\nimport { useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\n\nexport const updateClimbState = createAction('climbState/UPDATE_CLIMB_STATE');\n\nconst initialState = {\n    defeat: false,\n    floor: 0,\n    playerScore: 0,\n}\n\nexport default handleActions({\n    [updateClimbState]: (state, action) => ({ ...state, ...action.payload }),\n}, initialState);\n\n\nconst selectClimbState = createSelector(\n    state => state.climbState,\n    climbState => climbState   \n)\n\nexport const useClimbState = () => useSelector(selectClimbState);\n\n\n","\nexport const gameState = {\n\n    defeat: false,\n    floor: 0,\n    playerScore: 0,\n\n}","import React from 'react';\nimport titleStyle from \"./title.module.scss\";\nimport { updateScreen } from '../../../ducks/screen';\nimport { useDispatch } from 'react-redux';\n\nimport { updatePlayer } from '../../../ducks/player'\nimport { heros } from '../../../game-data/heros-data'\n\nimport { updateClimbState } from '../../../ducks/climbState';\nimport { gameState } from '../../../game-data/game-state';\n\nconst TitleScreen = () => {\n\n    const dispatch = useDispatch();\n  \n    // TODO: MOVE TO HERO WEAPON SELECTION SCREEN\n    dispatch(updatePlayer(heros[0]))\n    dispatch(updateClimbState(gameState))\n    \n    \n    return (\n        <div className={titleStyle.game} >\n            <div className={titleStyle.title} >SLAY THE TOWER</div>\n            <div className={titleStyle.menu} onClick={() => dispatch(updateScreen('Encounter'))}> TEST ENCOUNTER</div>\n            <div className={titleStyle.menu} onClick={() => dispatch(updateScreen('HeroSelection'))}> NEW GAME </div>\n            <div className={titleStyle.menu} onClick={() => dispatch(updateScreen('Map'))}> TEST MAP </div>\n        </div>\n    );\n}\n\nexport default TitleScreen","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport styles from './hand.module.scss'\nimport { usePlayer, applyCard } from '../../ducks/player';\n\n\n\nconst Card = () =>{\n\n    const player = usePlayer();\n    const dispatch = useDispatch();\n    const onCardClick = (index) =>  dispatch(applyCard(index));\n\n    return(\n        <div>\n            {\n                player.hand.map( (card, index) =>\n                    <button key={index} onClick={ () => onCardClick(index) } className={styles.customButton}>\n                        <div className = {styles.card}>\n\n                            <div className = {styles.titleSection}>\n\n                                <div className = {styles.title}> \n                                    {card.name} \n                                </div> \n\n                                <div className = {styles.energy}>\n                                    {card.energy}\n                                </div>\n\n                            </div>\n\n                            <br/>\n                            {card.art}\n                            <br/> <br/>\n                            {card.description}\n                        </div>\n                    </button>                \n                )}\n        </div>\n    );\n}\n\nconst Hand = () => {\n\n    // useEffect(() => { \n    //     // var card = document.createElement(\"div\");\n    //     // var node = document.createTextNode(\"This is new.\");\n    //     // card.appendChild(node);\n        \n    //     // var element = document.getElementById(\"hand\");\n    //     // var child = document.getElementById(\"c\");\n    //     // element.insertBefore(card, child);\n    // }, []);\n\n    const dispatch = useDispatch()\n\n    return (\n        <div className = {styles.activeZone}>\n            <div className = {styles.hand}>\n                <Card /> \n            </div>\n        </div>\n    );\n}\n\n\nexport default Hand;\n\n","import React from 'react';\nimport styles from './draw-zone.module.scss'\n\n// import Encounter from '../../game-mechanics/encounter';\nimport { usePlayer, playCard, drawCard } from '../../ducks/player';\nimport { useDispatch } from 'react-redux'\n\n\nconst DrawZone = () =>{\n    const player = usePlayer();\n    const dispatch = useDispatch()\n\n    return(\n        <div className={styles.drawZone}>\n            <div className={styles.energy}>\n                ENERGY: \n                <div/>\n                {player.energy}\n            </div>\n            <div className={styles.deck}>\n                DECK: <div/> {player.deck.length}\n                {/* <div/> */}\n                {/* <button className={styles.devButton} onClick={ () => dispatch( drawCard() ) }> DRAW </button> */}\n            </div>\n        </div>\n    );\n}\n\n\nexport default DrawZone;\n","import React from 'react';\nimport styles from './discard-zone.module.scss'\n\nimport { usePlayer, playCard, playIndexedCard } from '../../ducks/player';\nimport { useDispatch } from 'react-redux'\n\n\n\nconst DiscardZone = () =>{\n    const player = usePlayer();\n    const dispatch = useDispatch();\n    return(\n        <div className = {styles.discardZone}>\n            <div className={styles.void}> \n                VOID: <div/> {player.void.length}\n            </div>\n            <div className={styles.discard}>\n                DISCARD: <div/> {player.discard.length}\n                {/* <div/> */}\n                {/* <button className={styles.devButton} onClick={ () => dispatch( playCard() ) }> discard/play </button> */}\n            </div>\n        </div>\n    );\n}\n\n\nexport default DiscardZone;\n","import React from 'react';\nimport styles from './player-health.module.scss'\n\n// import Encounter from '../../game-mechanics/encounter';\nimport { usePlayer } from '../../ducks/player';\nimport { useEffect } from 'react';\n\n\nfunction updateHealthBar(health, maxHealth){\n    var bar = document.getElementById(\"playerHealthBar\")\n    bar.style.backgroundColor = 'darkgreen'\n\n    if (health == maxHealth){\n        bar.style.height = \"4vh\"\n        bar.style.width = \"80vw\"\n    }\n\n    if (health < maxHealth){\n        const dmg = ((health/maxHealth)*80) // 80vw\n        // const newBar = Math.ceil(health - dmg)\n        bar.style.width = dmg + \"vw\"        \n    }\n}\n\nfunction updateArmorBar(armor){\n    var bar = document.getElementById(\"armorBar\")\n    bar.style.backgroundColor = 'lightblue'\n    bar.style.position = 'absolute'\n    bar.style.opacity = '.75'\n\n    if (armor == 0){\n        bar.style.height = \"4vh\"\n        bar.style.width = \"0vw\" // 80 is max armor... should reach that tho...\n    }\n\n    if (armor > 0 ){\n        const newArmor = (armor/80) // 80vw\n        bar.style.width = armor + \"vw\"        \n    }\n}\n\nconst PlayerHealth = () =>{\n\n    const player = usePlayer();\n\n    useEffect( () => {\n        updateHealthBar(player.health, player.maxHealth)\n    }, [player.health])\n\n    useEffect( () => {\n        updateArmorBar(player.armor)\n    }, [player.armor])\n    \n    return(\n        <div className = {styles.playerHealthBorder}> \n            <div className = {styles.playerHealthIndicator}>\n                {player.health} / {player.maxHealth}\n            </div>\n            <div id=\"playerHealthBar\"> </div> \n            <div id=\"armorBar\"> </div>\n        </div>\n    );\n}\n\n\nexport default PlayerHealth;\n","import React from 'react';\nimport foe, { useFoe } from '../../ducks/foe'\nimport styles from \"./foe-zone.module.scss\";\nimport { useEffect } from 'react';\n\nfunction updateFoeHealthBar(foeHealth, foeMax){\n    var x = document.getElementById(\"foeHealthBar\")\n    x.style.backgroundColor = \"red\"\n\n    if (foeHealth == foeMax){\n        x.style.height = \"2vh\"\n        x.style.width = \"20vw\"\n    }\n\n    if (foeHealth < foeMax){\n        const dmg = ((foeHealth/foeMax)*20)\n        const newBar = Math.ceil(foeHealth - dmg)\n        x.style.width = newBar + \"vw\"        \n    }\n}\n\nfunction updateFoeArmorBar(armor){\n    var x = document.getElementById(\"foeArmorBar\")\n    x.style.backgroundColor = \"lightblue\"\n    x.style.opacity = \".75\"\n    x.style.position = \"absolute\"\n\n    if (armor == 0){\n        x.style.height = \"2vh\"\n        x.style.width = \"0vw\"\n    }\n\n    if (armor > 0){\n        // const dmg = ((foeHealth/foeMax)*20)\n        const newArmor = ((armor/100)*20)\n        x.style.width = newArmor + \"vw\"        \n    }\n}\n\nfunction getTelegraph(foe){\n    try{\n        // debugger;\n        console.log(\"contents:\", foe.telegraphing)\n        const answer = foe.telegraphing[0].effect + \" \"+ foe.telegraphing[0].power\n        return answer\n    }catch{\n        const answer = \"...\"\n        return answer\n    }\n}\n\nconst FoeZone = () =>{\n\n    const { health: foeHealth } = useFoe();\n    const { total: foeMax } = useFoe();\n    const { armor: foeArmor } = useFoe();\n    const foe = useFoe();\n    // const mv = foe.moves\n    // console.log( \"test:\", foe.moves ) \n    console.log(\"answer:\", getTelegraph(foe))\n    const telegraph = getTelegraph(foe)\n    \n\n    useEffect(() => {\n        updateFoeHealthBar(foeHealth, foeMax)\n    }, [foeHealth]);\n\n    useEffect(() => {\n        updateFoeArmorBar(foeArmor)\n    }, [foeArmor])\n    \n    return(\n        <div className={styles.foeZone}>\n            <div className = {styles.foe}>\n\n                <div className={styles.telegraph}> {telegraph} </div>\n                <div className={styles.foeTitle}> {foe.name} </div>\n                <img className = {styles.foeImg} src={foe.art} alt=\"foe img\"/>\n\n                <div className = {styles.foeHealthBorder}> \n                    <div className = {styles.foeHealthIndicator}> \n                        {foe.health} / {foe.total} \n                    </div>\n                    <div id=\"foeArmorBar\"> </div>\n                    <div id=\"foeHealthBar\"> </div>\n                    {/* className = {styles.foeHealthBar} */}\n                </div>\n\n                {/* {document.getElementById(\"foeHealthBar\").style.width= \"5\"} */}\n\n            </div>  \n        </div>        \n    );\n}\n\n\nexport default FoeZone;\n","import { createAction, handleActions } from \"redux-actions\";\nimport { useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { updateFoe } from './foe';\nimport { updatePlayer, discardHand, drawCard } from './player';\n\n// export const setupEncounter = createAction('foe/SETUP_ENCOUNTER');\nexport const updateEncounter = createAction('foe/UPDATE_ENCOUNTER');\n\nconst initialState = {};\n\n\nexport default handleActions({\n    [updateEncounter]: (state, action) => ({ ...state.encounter, ...action.payload }),\n}, initialState);\n\n\n// how we grab data from the store\nconst selectEncounter = createSelector(\n    state => state.encounter,\n    encounter => encounter   \n)\n\nexport const useEncounter = () => useSelector(selectEncounter);\n\nexport const endTurn = () => (dispatch, getState) => {\n\n    var zone = document.getElementById('playerZone');\n    console.log(\"zone\", zone)\n\n    zone.style.height = \"58vh\"\n    zone.style.width = \"100vw\"\n    zone.style.backgroundColor = \"black\"\n    zone.style.opacity = .75\n    zone.style.position = \"absolute\"\n\n    var turnBttn = document.getElementById('turnBttn');\n    \n\n    var combatMsgs = document.getElementById('combatMsgs');\n\n    combatMsgs.innerHTML = \"Foes Turn!\"\n    setTimeout( function()\n    { \n        combatMsgs.innerHTML = \"Waiting.\"; \n        dispatch( discardHand() )\n    }, 1000 );\n    setTimeout( function(){ combatMsgs.innerHTML = \"Waiting..\"; }, 1500 );\n    setTimeout( function(){ combatMsgs.innerHTML = \"Waiting...\"; }, 2000 );\n    \n    const state = getState()\n    const player = state.player\n    const foe = state.foe\n\n    const telegraphing = foe.telegraphing\n\n    if ( telegraphing[0].effect == \"damage\" ){\n        const dmg = telegraphing[0].power\n        const moveMsg = foe.name + \" uses \" + telegraphing[0].name + \" dealing\\n\" + telegraphing[0].power + \" dmg\"\n        setTimeout( function(){ combatMsgs.innerHTML = moveMsg }, 3000);\n\n        const trample = player.armor - dmg\n        if ( trample <= 0 ){\n            const newArmor = 0\n            const newHealth = player.health + trample\n            setTimeout( function(){ dispatch( updatePlayer({ health: newHealth, armor: newArmor }) ) },4000);\n            \n        } else {\n            const newArmor = trample\n            setTimeout( function(){ dispatch( updatePlayer({ armor: newArmor }) ) },4000);    \n        }\n        //  if players health drops to 0, exit game... do that later\n\n    } else if (telegraphing[0].effect == 'armor') {\n        const newFoeArmor = telegraphing[0].power\n        const moveMsg = foe.name + \" uses \" + telegraphing[0].name + \" gaining\\n\" + telegraphing[0].power + \" armor\"\n        setTimeout( function(){ combatMsgs.innerHTML = moveMsg }, 3000)\n        setTimeout( function(){ dispatch( updateFoe({ armor: newFoeArmor })) },4000);\n    }\n\n    // adding in a new foe effects...\n    // if ( telegraphing[0].effect == ) \n\n    const moves = foe.moves\n    const lengthOfMoves = Object.keys(moves).length\n    const position = telegraphing[0].order\n\n    if ( position + 1 < lengthOfMoves ) {\n        const newPos = position+1\n        const newTelegraph = moves.filter(obj => {\n            if (obj.order === newPos){\n                return obj\n            }\n        })\n        \n        console.log (\"new Telegraph\",newTelegraph)\n        setTimeout( function(){ dispatch( updateFoe({ telegraphing: newTelegraph }) )}, 4500)\n   \n    } else {\n        const newPos = 0\n        const newTelegraph = moves.filter(obj => {\n            if (obj.order == newPos){\n                return obj\n            }        \n        })        \n        console.log (\"new Telegraph\",newTelegraph)\n        setTimeout( function(){ dispatch( updateFoe({ telegraphing: newTelegraph }) )}, 4500)\n    }\n\n\n    // notify player foe turn is over, and their turn now begins...\n    // with that we have to reset player armor & energy\n    // could handle everything from getState and updates here...\n\n    // TODO: await (dispatch)... create a function with Await(game action),(how-long). ( A Promise )\n    setTimeout( function(){ combatMsgs.innerHTML = \"Foe's Turn Over\" }, 5000);\n    setTimeout( function(){ combatMsgs.innerHTML = \"Armor & Energy Reset\" }, 6000);\n    setTimeout( function(){ dispatch( updatePlayer({ energy: 3, armor:0 }) )}, 6100);\n    setTimeout( function(){ combatMsgs.innerHTML = \"Your Turn...\" }, 7000);\n    \n    setTimeout( function(){     \n        dispatch( drawCard() )\n    }, 7000);\n\n    setTimeout( function(){\n        dispatch( drawCard() )\n    }, 7300);\n\n    setTimeout( function(){\n        dispatch( drawCard() )\n    }, 7600);\n\n    setTimeout( function(){\n        dispatch( drawCard() )\n    }, 7900);\n\n    setTimeout( function(){\n        dispatch( drawCard() )\n        zone.style.height = \"0vh\"\n        zone.style.width = \"0vw\"\n\n        // turnBttn.cursor = \"allowed\";\n        // turnBttn.backgroundColor = \"darkslategrey\"\n        // turnBttn.style.opacity = 1\n\n    }, 8200);\n\n\n\n}","import React from 'react';\nimport styles from './turn-bttn.scss'\n\n// import { usePlayer, playCard } from '../../ducks/player';\nimport { useDispatch } from 'react-redux'\n\nimport { endTurn } from '../../ducks/encounter'\n\n\n\nconst TurnBttn = () =>{\n    // const player = usePlayer();\n    const dispatch = useDispatch();\n\n    const onBttnClick = () =>  dispatch(endTurn());\n\n    return(\n        <button id=\"turnBttn\" onClick={onBttnClick} className = {styles.devButton}>\n            [ END TURN ]\n        </button>\n    );\n}\n\n\nexport default TurnBttn;\n","import { createAction, handleActions } from \"redux-actions\";\nimport { useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\n\nexport const updateMap = createAction('map/UPDATE_MAP');\n\n\n// maybe add some trackers for trials, bonfires, elites & shops. To somehow limit or increase it?\n\nconst initialState = {\n    fieldEvent: \"event name\",\n    fieldPaths: 0,\n    fieldPathEvents: [],\n    count: 0\n}\n\n\nexport default handleActions({\n    [updateMap]: (state, action) => ({ ...state, ...action.payload }),\n}, initialState);\n\n\nconst selectMap = createSelector(\n    state => state.map,\n    map => map   \n)\n\nexport const useMap = () => useSelector(selectMap);\n\n\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styles from \"./encounter.module.scss\";\n\nimport { spawnFoe } from '../../../ducks/foe';\nimport { usePlayer, updatePlayer } from '../../../ducks/player';\n\nimport { updateScreen } from '../../../ducks/screen';\n\nimport Hand from '../../hand'\nimport DrawZone from '../../draw-zone'\nimport DiscardZone from '../../discard-zone'\nimport PlayerHealth from '../../player-health'\nimport FoeZone from '../../foe-zone'\nimport TurnBttn from '../../turn-bttn'\n\nimport { useFoe } from '../../../ducks/foe'\n\nimport { updateClimbState } from '../../../ducks/climbState';\nimport { updateMap } from '../../../ducks/map';\n\n\nconst EncounterScreen = () => {\n    const { health: foeHealth } = useFoe();\n    const player = usePlayer();\n\n    const dispatch = useDispatch();\n    \n\n    useEffect(() => {\n        // This block of code only executes when foeHealth changes\n        console.log(\"encounter foe hp:\", foeHealth)\n        if (foeHealth <= 0) {\n            dispatch(spawnFoe());\n            dispatch( updateScreen('Map') )\n            dispatch( updatePlayer({ energy: 3, armor:0 }) )\n            // dispatch( updateScreen('End') ) < - - - - - - When resolve: victory screen is working...\n        }\n    }, [foeHealth]);\n\n    useEffect(() => {\n        if (player.health <= 0) {\n            dispatch(spawnFoe());\n            dispatch( updateClimbState({defeat:true}) )\n            dispatch( updatePlayer({ energy: 3, armor:0 }) )\n            // dispatch( updateScreen('End') ) < - - - - - - When resolve: death screen is working...\n            dispatch( updateScreen('Map') )\n        }\n    }, [player.health]);\n\n    return (\n    <div className={styles.game}>\n            {/* <button onClick={ () => dispatch( shuffleDeck() ) }> shuffle </button> */}\n            <PlayerHealth />\n            <FoeZone />\n            <div id='combatZone' className={styles.combatZoneOverlay}>\n                <div id='combatMsgs' className={styles.combatMsgs}> COMBAT MSGS </div>\n                <TurnBttn />\n            </div>\n\n            \n        <div className={styles.playerZone}> \n            <div id='playerZone'> </div>\n            <DrawZone />\n            <Hand />\n            <DiscardZone />\n        </div>\n    </div>\n    );\n    \n}\n\n\nexport default EncounterScreen;\n\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styles from \"./resolution.module.scss\";\nimport { useClimbState } from '../../../ducks/climbState'\n\n\nimport { updateScreen } from '../../../ducks/screen';\n\n\n// need to import reward cards...\n// select 3 random reward cards and display them.\n\n\n// for reward: body\n// import { drawHand, shuffleDeck, useCard } from '../../ducks/player';\n\n\nconst ResolutionScreen = () => {\n\n    const dispatch = useDispatch();\n    const climbState = useClimbState();\n\n    let header = ''\n    let body = ''\n    let bttn = ''\n\n    if ( !climbState.defeat ) {\n        header = 'VICTORY'\n        body = 'You Won! Unfortunately there is no rewards yet... But they are on there way!'\n        bttn = 'CONTINUE'\n    } else {\n        header = 'DEFEAT'\n        body = 'You Lost!'\n        bttn = 'EXIT'\n    }\n\n    return (\n    <div className={styles.gameScreen}>\n        <div className={styles.menuContainer}>\n\n            <div className={styles.menuHeader}>\n                {header}\n            </div>\n\n            <div className={styles.menuBody}>\n                {body}\n            </div>\n\n            <div className={styles.menuFooter}>\n                <div className={styles.menuOption} onClick={() => dispatch(updateScreen('Title'))}>\n                    {bttn}\n                </div>\n            </div>\n\n        </div>\n    </div>\n    );\n    \n}\n\n\nexport default ResolutionScreen;\n\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styles from \"./hero-selection.module.scss\";\n\n\nimport { gameState } from '../../../game-data/game-state';\nimport { updateClimbState } from '../../../ducks/climbState';\nimport { updatePlayer } from '../../../ducks/player'\nimport { heros } from '../../../game-data/heros-data'\nimport { updateScreen } from '../../../ducks/screen';\n\n// import { HeroDetail } from './hero-detail';\n\n\n// in this screen player chooses hero weapon / deck\n\nconst HeroSelection = () => {\n\n    const dispatch = useDispatch();\n\n    const onCardClick = (heroType) => {\n        console.log(heroType)\n        dispatch(updatePlayer(heros[0]))\n        dispatch(updateClimbState(gameState))\n        dispatch(updateScreen('Encounter'))\n        // will be changed to map screen.\n    }\n\n    return (\n        <div className={styles.gameScreen}>\n            <div className={styles.title} >CHOOSE YOUR HERO</div>\n\n            <div className={styles.menuContainer}>\n\n                <div onClick={ () => onCardClick('sword') } className={styles.heroContainer}>\n                    <div className={styles.heroTitle}> sword </div>\n                    <div className={styles.heroImg}></div>\n                </div>\n\n                {/* <div onClick={() => choice('staff')} className={styles.heroContainer}>\n                    <div className={styles.heroTitle}> staff </div>\n                    <div className={styles.heroImg}></div>\n                </div> */}\n            </div>\n        </div>\n    );\n}\n\n\nexport default HeroSelection;\n\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport _, { random, isEmpty } from 'lodash';\nimport styles from \"./map.module.scss\";\n\n\nimport { useMap, updateMap } from '../../../ducks/map';\nimport { updateScreen } from '../../../ducks/screen';\n\n// For Encounters:\nimport { usePlayer, drawHand, shuffleDeck, resetDeck } from '../../../ducks/player';\nimport { spawnFoe } from '../../../ducks/foe';\n\n\nfunction eventHandler(event, dispatcher){\n  console.log(\"EVENT:\", event)\n  switch (event) {\n    case '👹':\n      dispatcher(updateScreen('Title'));\n    case '💢':\n      break;\n    case '🔥':\n      break;\n    case '❗':\n      break;\n    case '💰':\n      break;\n    case '⚔️':\n      console.log('engaging combat...')\n\n      dispatcher(spawnFoe());\n      dispatcher(resetDeck());\n      dispatcher(shuffleDeck());\n      dispatcher(drawHand());\n      // Load fight before screen update?\n      dispatcher(updateScreen('Encounter'));\n      break;\n    default:\n      break;\n  }\n}\n\nfunction rollDice(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; \n}\n\nfunction genPathLength(){\n  let length = rollDice(1,4)\n  let onesOdds = rollDice(0,50)\n\n  if (onesOdds == 0 && length == 1){\n    return 1\n  }\n  if (onesOdds < 1 && length == 3){\n    return 4\n  }\n  return length\n}\n\nfunction genEvent( roll, fightOdds, elieteOdds, bonfireOdds, trialOdds, shopOdds){\n  if ( roll < fightOdds){\n    return {  fieldEvent: '⚔️' }\n  }else if ( roll < elieteOdds ){\n    return {  fieldEvent: '💢' }\n  }else if ( roll < bonfireOdds ){\n    return {  fieldEvent: '🔥' }\n  }else if ( roll < trialOdds ){\n    return {  fieldEvent: '❗' }\n  }else if ( roll < shopOdds){\n    return {  fieldEvent: '💰' }\n  }else{\n    return {  fieldEvent: '⚔️' }\n  }\n}\n\nfunction genPath( pathLength, setEvent ){\n\n  if ( setEvent ){\n    \n    let events = []\n    for (let e = 0; e < pathLength; e++) {\n      let roll = rollDice(0,101);\n      events.push(genEvent(roll, 70, 85, 100, 0, 0))\n    }\n\n    return({\n      fieldEvent: setEvent,\n      fieldPaths: pathLength,\n      fieldPathEvents: events\n    })\n\n  }else{\n\n    // generate paths\n    let events = []\n    for (let e = 0; e < pathLength; e++) {\n      let roll = rollDice(0,101);\n      events.push(genEvent(roll, 70, 90, 100))\n    }\n\n    // generate field of said paths\n    let roll = rollDice(0,101);\n    return({\n      fieldEvent: genEvent(roll, 70, 80, 87, 95, 100).fieldEvent,\n      fieldPaths: pathLength,\n      fieldPathEvents: events\n    })\n\n  }\n}\n\nfunction fillPaths( numberOfPaths, setEvent) {\n  const paths = []\n\n  for (let p = 0; p < numberOfPaths; p++) {\n    // Gen a new number of paths per field choice\n    paths.push( genPath( genPathLength(), setEvent ))\n  }\n\n  return paths\n}\n\nfunction startingField(startingPaths){\n  let newField = {\n    fieldEvent: 'START',\n    fieldPaths: startingPaths,\n    fieldPathEvents: fillPaths(startingPaths, '⚔️'),\n    count: 0\n  }\n  return newField\n}\n\nfunction createField( fieldEvents, fieldCount ){\n  let pathLength = 0\n  let fieldBatch = []\n\n  if ( fieldCount === 7){\n    for (let i = 0; i < fieldEvents.length; i++) {\n      fieldBatch.push({\n        fieldEvent: fieldEvents[i].fieldEvent,\n        fieldPaths: 0,\n        fieldPathEvents: [{\n          fieldEvent: \"👹\"\n        }]\n      })\n    }\n  }else{\n    for (let i = 0; i < fieldEvents.length; i++) {\n      pathLength = genPathLength()\n      fieldBatch.push({\n        fieldEvent: fieldEvents[i].fieldEvent,\n        fieldPaths: pathLength,\n        fieldPathEvents: fillPaths(pathLength)\n      })\n    }\n  }\n\n  return fieldBatch\n}\n\nconst MapScreen = () => {\n\n  const dispatch = useDispatch();\n  const currentField = useMap();\n  const UsePlayer = usePlayer();\n\n\n  useEffect(() => {\n    if (currentField.count === 0){\n      dispatch(updateMap(startingField(3)))\n    }\n  }, []);\n  \n\n  const onPathSelection = (field) => {\n    let newField = {}\n\n    // check if the next event is going to be floor boss:\n    let isBossNext = field.fieldPathEvents.find( fields => fields.fieldEvent === \"👹\" )\n    \n    if ( isBossNext ){\n      newField = {\n        fieldEvent: field.fieldEvent,\n        fieldPaths: 1,\n        fieldPathEvents: [{\n            fieldEvent: \"👹\",\n            fieldPaths: 0,\n          fieldPathEvents: []\n        }],\n        count: currentField.count + 1\n      }\n    }else{\n      newField = {\n        fieldEvent: field.fieldEvent,\n        fieldPaths: field.fieldPathEvents.length,\n        fieldPathEvents: createField(field.fieldPathEvents, currentField.count),\n        count: currentField.count + 1\n      }\n    }\n    // update map...\n    dispatch(updateMap(newField))\n    eventHandler(newField.fieldEvent, dispatch)\n  }\n\n\n  return (\n    <div style={{display:'flex', flexDirection:'column', justifyContent: 'center', alignItems: 'center', width: '100vw', height: '100vh', color: 'white'}}>\n      \n      <div style={{display:'flex', width:'90vw',flexDirection:'row', backgroundColor: 'black', color:'white'}}>\n        <strong style={{color:'red', margin:'10px'}}> ❤️ {UsePlayer.health}/{UsePlayer.maxHealth}</strong>\n      </div>\n\n      <div style={{display:'flex', flexDirection:'column', justifyContent: 'center', alignItems: 'center', backgroundColor: 'black', width:'90vw', height:'90vh'}}>\n        <h1> Field Event: {currentField.fieldEvent}</h1>\n\n        <div style={{display:'flex', flexDirection:'row',}}>\n          {currentField.fieldPathEvents.map( (field, index) =>\n            <button key={index} className={styles.pathButton} onClick={() => onPathSelection(field)}>\n                <h2>{field.fieldEvent}</h2>\n                {field.fieldPathEvents.map( (e, index) => \n                  <div key={index} style={{display:'flex', margin:'2px', opacity:'.5'}}>\n                    {e.fieldEvent}\n                  </div>\n                )}\n            </button>\n          )}\n        </div>\n\n      </div>\n\n    </div>\n  );\n\n}\n\n\nexport default MapScreen;\n\n","import React from 'react';\nimport Title from './components/screens/title';\nimport Encounter from './components/screens/encounter';\nimport Resolution from './components/screens/resolution';\nimport HeroSelection from './components/screens/hero-selection';\nimport Map from './components/screens/map';\nimport { useScreen } from './ducks/screen';\n\nconst screens = {\n  Title,\n  Encounter,\n  Resolution,\n  HeroSelection,\n  Map,\n}\n\nconst App = () => {\n  const screen = useScreen();\n  const Screen = screens[screen];\n\n  return <Screen />\n}\n\nexport default App\n","import { combineReducers } from 'redux';\nimport player from './player';\nimport foe from './foe';\nimport screen from './screen';\nimport encounter from './encounter';\nimport climbState from './climbState';\nimport map from './map';\n\nexport default combineReducers({\n    player,\n    foe,\n    screen,\n    encounter,\n    climbState,\n    map\n})","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nimport { Provider } from 'react-redux'\nimport configureStore from './configurestore'\n\nconst rootElement = document.getElementById('root');\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    rootElement\n);\n","import { applyMiddleware, createStore } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport rootReducer from './ducks/'\n\nexport default function configureStore(preloadedState) {\n  const middlewares = [thunkMiddleware];\n  const middlewareEnhancer = applyMiddleware(...middlewares)\n\n  const enhancers = [middlewareEnhancer];\n  const composedEnhancers = composeWithDevTools(...enhancers)\n\n  const store = createStore(rootReducer, preloadedState, composedEnhancers)\n\n  return store;\n}\n\n\n"],"sourceRoot":""}